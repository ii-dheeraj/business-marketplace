// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum TrackingStatus {
  ORDER_PLACED
  ORDER_CONFIRMED
  PREPARING_ORDER
  READY_FOR_PICKUP
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  ONLINE_PAYMENT
  WALLET
}

// Customer table
model Customer {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  phone    String?
  countryCode String @default("+91")
  password String
  avatar   String?

  // Common fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   Order[]
  payments Payment[]
}

// Seller table
model Seller {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  phone    String?
  countryCode String @default("+91")
  password String
  avatar   String?

  // Business specific fields
  businessName        String
  category            String // Main business category (single selection)
  subcategories       String // JSON array of subcategories (multiple selection)
  businessAddress     String
  businessCity        String
  businessState       String? // Added missing field
  businessPincode     String? // Added missing field
  businessArea        String?
  businessLocality    String?
  businessDescription String?
  businessImage       String?
  website             String? // Added missing field
  openingHours        String? // Added missing field
  isVerified          Boolean @default(false)
  isPromoted          Boolean @default(false)
  rating              Float   @default(0)
  totalReviews        Int     @default(0)
  deliveryTime        String?
  isOpen              Boolean @default(true)

  // Common fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products     Product[]
  sellerOrders SellerOrder[]
}

// Delivery Agent table
model DeliveryAgent {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  phone    String?
  countryCode String @default("+91")
  password String
  avatar   String?

  // Delivery specific fields
  vehicleNumber   String
  vehicleType     String
  isAvailable     Boolean @default(true)
  currentLocation String?

  // Common fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deliveryOrders Order[] @relation("DeliveryAgent")
}

// Product table for sellers
model Product {
  id            Int     @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  image         String?
  category      String?
  subcategory   String?
  stock         Int     @default(0)
  inStock       Boolean @default(true)
  isActive      Boolean @default(true)

  // Seller relation
  sellerId Int
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
}

// Order table for customer orders
model Order {
  id          Int    @id @default(autoincrement())
  orderNumber String @unique

  // Customer who placed the order
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  // Delivery agent assigned to the order
  deliveryAgentId Int?
  deliveryAgent   DeliveryAgent? @relation("DeliveryAgent", fields: [deliveryAgentId], references: [id])

  // Order details
  items       OrderItem[]
  orderStatus OrderStatus @default(PENDING)

  // Customer details
  customerName     String
  customerPhone    String
  customerAddress  String
  customerCity     String
  customerArea     String
  customerLocality String?

  // Amount details
  subtotal    Float
  deliveryFee Float
  taxAmount   Float @default(0)
  totalAmount Float

  // Payment details
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)

  // Delivery details
  deliveryInstructions  String?
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sellerOrders SellerOrder[]
  payments     Payment[]
  tracking     OrderTracking[]
}

// Order items within an order
model OrderItem {
  id Int @id @default(autoincrement())

  // Order relation
  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product relation
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  // Item details
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Product snapshot (in case product gets deleted/modified)
  productName     String
  productImage    String?
  productCategory String?
}

// Seller Orders table to track orders for each seller
model SellerOrder {
  id Int @id @default(autoincrement())

  // Order relation
  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Seller relation
  sellerId Int
  seller   Seller @relation(fields: [sellerId], references: [id])

  // Seller order status
  status OrderStatus @default(PENDING)

  // Seller specific details
  items      Json // Array of order items for this seller
  subtotal   Float
  commission Float @default(0)
  netAmount  Float

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, sellerId])
}

// Payment table to track all payments
model Payment {
  id        Int    @id @default(autoincrement())
  paymentId String @unique

  // Order relation
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  // Customer relation (who made the payment)
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  // Payment details
  amount        Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)

  // Transaction details
  transactionId   String?
  gateway         String?
  gatewayResponse Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Order tracking for real-time updates
model OrderTracking {
  id          Int            @id @default(autoincrement())
  orderId     Int
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      TrackingStatus
  description String
  location    String?
  createdAt   DateTime       @default(now())

  @@index([orderId])
}

// Chat messages for customer-seller communication
model ChatMessage {
  id           Int      @id @default(autoincrement())
  senderId     String // Can be customer or seller ID
  senderType   String // "customer" or "seller"
  receiverId   String // Can be customer or seller ID
  receiverType String // "customer" or "seller"
  message      String
  orderId      Int? // Optional: link to specific order
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
